using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using SocialWorkouts.ApplicationDb.Models;
using SocialWorkouts.Services;

namespace SocialWorkouts.Controllers;

[ApiController]
[Route("[controller]")]
public class StandardUserController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly ILogger<StandardUserController> _logger;

    public StandardUserController(ILogger<StandardUserController> logger, ApplicationDbContext context)
    {
        _logger = logger;
        _context = context;
    }

    // /// <summary>*WIP* Returns the search preferences of a user from their id</summary>
    // /// <remarks>The search preferences of a user is stored as a user object
    // /// where all the null fields are non-cares and the filled out fields
    // /// are the preferences</remarks>
    // /// <param name="id">The id of the user</param>
    // /// <returns>The search preferences</returns>
    // /// <response code="200">Returns the search preferences</response>
    // /// <response code="404">User with that id could not be found</response>
    // [HttpGet("{id}/SearchPref")]
    // public ActionResult<SearchPreferencesEntity> Get(int id)
    // {
    //     var preferences = _context.SearchPreferences?.FirstOrDefault(p => p.Id == id);
    //     if (preferences is null) return NotFound();
    //     return preferences;
    // }

    // /// <summary>*WIP* Updates a user's search preferences</summary>
    // /// <remarks>The search preferences of a user is stored as a user object
    // /// where all the null fields are non-cares and the filled out fields
    // /// are the preferences</remarks>
    // /// <param name="id">The id of the user</param>
    // /// <param name="user">The updated search preferences</param>
    // /// <response code="204">The specified user's search preferences were updated</response>
    // /// <response code="404">A user with that id could not be found</response>
    // [HttpPut("{id}/SearchPref")]
    // public ActionResult UpdatePreferences(int id, SearchPreferencesEntity preferences)
    // {
    //     if (id != preferences.Id) return BadRequest();
    //     var user = _context.Users?.FirstOrDefault(u => u.Id == id);
    //     if (user is null) return NotFound();
    //     _context.Entry(preferences).State = EntityState.Modified;
    //     _context.SaveChanges();
    //     return NoContent();
    // }

    /// <summary>Creates a new standard user</summary>
    /// <param name="user">The standard user to create</param>
    /// <returns>The newly created standard user</returns>
    /// <response code="201">Returns the newly created standard user</response>
    /// <response code="400">The standard user is null or it matches the id of another standard user</response>
    [HttpPost]
    public async Task<IActionResult> Create(StandardUserEntity user)
    {
        if (user.Id != null) return BadRequest("You cannot specify an id for a user, it is generated by the database");
        else if (string.IsNullOrWhiteSpace(user.Password)) return BadRequest("You must provide a valid password");
        await _context.User.AddAsync(user);
        await _context.SaveChangesAsync();
        return CreatedAtAction("Create", user);
    }


    /// <summary>Creates a new invoice for a standard user</summary>
    /// <param name="userId">The id of the user</param>
    /// <param name="planId">The id number of the workout plan</param>
    /// <returns>The newly created invoice</returns>
    /// <response code="201">Returns the newly created invoice</response>
    /// <response code="400">The user has already bought that plan</response>
    /// <response code="404">The standard user or workout plan could not be found</response>
    [HttpPost("buyPlan")]
    public async Task<ActionResult<InvoiceEntity>> BuyPlan(int userId, int planId)
    {
        var user = await _context.User.FindAsync(userId);
        if (user is null) return NotFound(ErrorCode.DoesNotExist("user"));
        var dupeInvoice = await _context.Invoice.FirstOrDefaultAsync(i =>
        i.UserId == userId && i.WorkoutPlan.Id == planId);
        if (dupeInvoice is not null) return BadRequest("The user has already bought that plan");
        var plan = await _context.WorkoutPlan.FindAsync(planId);
        if (plan is null) return NotFound(ErrorCode.DoesNotExist("plan"));
        var invoice = new InvoiceEntity();
        invoice.Cost = plan.Cost;
        invoice.User = user;
        invoice.WorkoutPlan = plan;
        await _context.AddAsync(invoice);
        await _context.SaveChangesAsync();
        return CreatedAtAction("BuyPlan", invoice);
    }

    // <summary>Gets all the bought plans of a user</summary>
    /// <param name="id">Their id number</param>
    /// <response code="200">Returns the list of matching users</response>
    /// <response code="404">Could not find the user</response>
    [HttpGet("{id}/Plans")]
    public async Task<ActionResult<IEnumerable<WorkoutPlanEntity>>> MyPlans(int id)
    {
        var user = await _context.StandardUser.FindAsync(id);
        if (user is null) return NotFound();
        var invoices = _context.Invoice.Include(i => i.WorkoutPlan)
        .Where(i => i.UserId == id);
        var plans = new List<WorkoutPlanEntity>();
        foreach (InvoiceEntity i in invoices)
        {
            plans.Add(i.WorkoutPlan);
        }
        return plans;
    }

    /// <summary>Gets all standard users matching the provided search parameters</summary>
    /// <param name="id">Their id number</param>
    /// <param name="firstName">Their first name</param>
    /// <param name="lastName">Their last name</param>
    /// <param name="email">Their email address</param>
    /// <param name="fitnessLevel">The fitness level of the user</param>
    /// <response code="200">Returns the list of matching users</response>
    [HttpGet("")]
    public IEnumerable<StandardUserEntity> Query(int? id = -1, String? firstName = null, String? lastName = null,
    String? email = null, String? fitnessLevel = null)
    {
        return _context.StandardUser.AsEnumerable().Where(user => (
            (user.Id == id || id == -1) &&
            (user.FName == firstName || firstName == null) &&
            (user.LName == lastName || lastName == null) &&
            (user.Email == email || email == null) &&
            (user.FitnessLevel == fitnessLevel || fitnessLevel == null)));
    }

}